// Задание 1. Конвейер
// Цели задания:
// -Научиться работать с каналами и горутинами.
// -Понять, как должно происходить общение между потоками.
// Что нужно сделать:
// -Реализуйте паттерн-конвейер:

// Программа принимает числа из стандартного ввода в бесконечном цикле и передаёт число в горутину.

// -Квадрат: горутина высчитывает квадрат этого числа и передаёт в следующую горутину.

// -Произведение: следующая горутина умножает квадрат числа на 2.

// -При вводе «стоп» выполнение программы останавливается.

// Советы и рекомендации:

// Воспользуйтесь небуферизированными каналами и waitgroup.

package main

import (
	"fmt"
	"log"
	"strconv"
	"sync"
)

func main() {

	var n string

	ch1 := make(chan int)
	ch2 := make(chan int)
	wg := sync.WaitGroup{}

	go func() {
		for v := range ch1 {
			ch2 <- v * v
			fmt.Printf("Квадрат числа %d: %d", v, v*v)
		}
	}()

	go func() {
		for v := range ch2 {
			fmt.Printf("\nПроизведение числа %d: %d\n", v, v*2)
			wg.Done()
		}
	}()

	for {
		fmt.Scan(&n)
		if n == "стоп" {
			return
		}
		n, err := strconv.Atoi(n)
		if err != nil {
			log.Fatal(err)
		}
		wg.Add(1)
		ch1 <- n
		wg.Wait()
	}

}
