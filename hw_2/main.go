// Задание 2. Graceful shutdown
// Цель задания:
// Научиться правильно останавливать приложения.
// Что нужно сделать:
// -В работе часто возникает потребность правильно останавливать приложения. Например, когда наш сервер обслуживает соединения,
// а нам хочется, чтобы все текущие соединения были обработаны и лишь потом произошло выключение сервиса. Для этого существует паттерн graceful shutdown.
// -Напишите приложение, которое выводит квадраты натуральных чисел на экран, а после получения сигнала ^С обрабатывает этот сигнал,
//  пишет «выхожу из программы» и выходит.
// Советы и рекомендации:
// Для реализации данного паттерна воспользуйтесь каналами и оператором select с default-кейсом.

package main

import (
	"fmt"
	"os"
	"os/signal"
	"syscall"
	"time"
)

func main() {

	signalCh := make(chan os.Signal, 1)
	doneCh := make(chan struct{})

	signal.Notify(signalCh, os.Interrupt, syscall.SIGINT)

	go func() {
		<-signalCh
		fmt.Println("\nПолучен сигнал завершения, обработка...")
		close(doneCh)
	}()

	// Главный цикл программы
	for i := 1; ; i++ {
		select {
		case <-doneCh:
			fmt.Println("Завершение работы программы...")
			return
		default:
			fmt.Printf("Квадрат числа %d: %d\n", i, i*i)
			time.Sleep(1 * time.Second)
		}
	}
}
